// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JournalEntry {
  id        String   @id @default(cuid())
  content   String
  date      DateTime
  tags      String[]
  sentiment Float
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model User {
  id            String         @id @default(cuid())
  email         String        @unique
  password      String
  username      String        @unique
  journalEntries JournalEntry[]
  blogs         Blog[]
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  profileNotes  ProfileNote[]
  events        Event[]
  eventParticipations EventParticipant[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

// New models for Reddit-like features
model Post {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  votes       Vote[]
  score       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          String    @id @default(cuid())
  content     String    @db.Text
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  parentId    String?   // For nested comments
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
  votes       Vote[]
  score       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Vote {
  id        String   @id @default(cuid())
  value     Int      // 1 for upvote, -1 for downvote
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}


model ProfileNote {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt]) // For efficient cleanup of expired notes
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  startTime   DateTime
  endTime     DateTime
  type        String   // e.g., "workshop", "support_group", "therapy_session"
  location    String?
  capacity    Int?     // Maximum number of participants
  isPublic    Boolean  @default(true)
  status      String   @default("upcoming") // upcoming, ongoing, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  participants EventParticipant[]

  @@index([userId])
  @@index([startTime, endTime])
  @@index([status])
}

model EventParticipant {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  status    String   @default("registered") // registered, attended, cancelled
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([eventId, userId])
  @@index([userId])
  @@index([eventId])
}